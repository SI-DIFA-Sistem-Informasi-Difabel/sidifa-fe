name: Deploy Frontend with Docker

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub (or other registry)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/sidifa-fe:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail

            # --- Context dari GitHub Actions untuk URL raw ---
            REPO='${{ github.repository }}'      # e.g. owner/repo
            REF='${{ github.ref_name }}'         # e.g. main
            RAW_URL_DEFAULT="https://raw.githubusercontent.com/${REPO}/${REF}/compose.yaml"
            RAW_URL_FALLBACK="https://raw.githubusercontent.com/hisyam99/sidifa-fe/refs/heads/main/compose.yaml"

            # --- Container engine (default docker) ---
            ENGINE='${{ secrets.CONTAINER_ENGINE }}'
            if [ -z "${ENGINE:-}" ]; then ENGINE="docker"; fi

            echo "--- Navigating to deployment directory ---"
            cd "${{ secrets.DEPLOY_PATH }}"

            # --- Backup .env bila ada ---
            if [ -f .env ]; then
              echo "--- Backing up existing .env file ---"
              mv .env ".env.bak_$(date +%Y%m%d_%H%M%S)"
            else
              echo "--- No existing .env file found to backup ---"
            fi

            echo "--- Creating new .env file from secrets ---"
            cat <<'EOF' > .env
            ORIGIN="${{ secrets.ORIGIN }}"
            PUBLIC_BASE_URL="${{ secrets.PUBLIC_BASE_URL }}"
            PUBLIC_API_URL="${{ secrets.PUBLIC_API_URL }}"
            PUBLIC_UPLOADS_URL="${{ secrets.PUBLIC_UPLOADS_URL }}"
            DOCKER_IMAGE_REGISTRY="${{ secrets.DOCKER_IMAGE_REGISTRY }}"
            DOCKER_IMAGE_REPO="${{ secrets.DOCKER_IMAGE_REPO }}"
            DOCKER_IMAGE_TAG="${{ secrets.DOCKER_IMAGE_TAG }}"
            OUTSIDE_PORT="${{ secrets.OUTSIDE_PORT }}"
            EOF

            # --- Pastikan compose.yaml tersedia ---
            if [ ! -f compose.yaml ]; then
              echo "--- compose.yaml not found. Attempting to download from current repo/branch ---"
              if ! curl -fsSL "$RAW_URL_DEFAULT" -o compose.yaml; then
                echo "--- Fallback: downloading compose.yaml from provided link ---"
                curl -fsSL "$RAW_URL_FALLBACK" -o compose.yaml
              fi
              echo "--- compose.yaml downloaded ---"
            else
              echo "--- compose.yaml already exists ---"
            fi

            echo "--- Pulling latest Docker image ---"
            REGISTRY='${{ secrets.DOCKER_REGISTRY }}'
            if [ -z "${REGISTRY:-}" ]; then REGISTRY="docker.io"; fi
            IMAGE_USER='${{ secrets.DOCKER_USERNAME }}'
            "$ENGINE" pull "$REGISTRY/${IMAGE_USER}/sidifa-fe:latest" || true

            echo "--- docker compose pull ---"
            "$ENGINE" compose -f compose.yaml pull sidifa-fe || true

            echo "--- Stopping & removing old containers ---"
            "$ENGINE" compose -f compose.yaml down || true

            # Remove sidifa-fe container if exists (extra safety)
            if "$ENGINE" ps -a --format '{{.Names}}' | grep -wq sidifa-fe; then
              echo "--- Removing existing sidifa-fe container ---"
              "$ENGINE" rm -f sidifa-fe || true
            fi

            echo "--- Starting new container ---"
            "$ENGINE" compose -f compose.yaml up -d --remove-orphans

            echo "--- Deployment complete ---"
